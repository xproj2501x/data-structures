/**
 * Data Structures - Binary Node
 * ===
 *
 * @module binaryNode
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Node from './node';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class BinaryNode extends Node {
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _left;
  _right;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  get left(){
    return this._left;
  }

  get right(){
    return this._right;
  }

  set left(data){
    let node = data instanceof BinaryNode ? data : new BinaryNode(data);
    this._left = node;
  }

  set right(data){
    let node = data instanceof BinaryNode ? data : new BinaryNode(data);
    this._right = node;
  }

  constructor(data, left, right){
    super(data);
    this._left = left instanceof BinaryNode ? left : new BinaryNode(left);
    this._right = right instanceof BinaryNode ? right : new BinaryNode(right);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default BinaryNode;